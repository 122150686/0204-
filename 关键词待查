is-a关系，has-a关系，is-like-a关系。
 ————强调的是什么情况下用继承，什么情况用友元。总结：能不用继承就不用。

构造函数的几种类型：拷贝构造函数，赋值构造函数。构造函数的{}初始化
    拷贝构造函数：在main（）当中创建实例的时候。参数为之前创建的对象。
    赋值构造函数：初始化的时候，用拷贝构造函数。已经有两个对象，需要定义（赋值）（实现）的时候，用赋值。
    
    浅拷贝vs深拷贝：
    浅拷贝：直接使用拷贝构造函数。深拷贝：使用赋值构造函数？
    
    
静态联编、动态联编？
    动态联编：在程序执行的过程当中，才能确定要调用case1还是case2。
    
    
    
虚函数？
    做API的时候，再学。


一个冒号的两种用法：
（1）构造函数
Bullet(int a,int b):speed(a),speed(b){}
(2)继承
Class Cat: public Animal{}



    
    
ABC理念：
（1）普通函数
（2）虚函数
（3）纯虚函数
（4）包含纯虚函数的类
（5）接口 ：接口（抽象类 通常称为 ABC）
至少有一个函数被声明为纯虚函数，则这个类就是抽象类
是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。
一个 ABC 的子类需要被实例化，则必须实现每个虚函数
抽象基类为所有的外部应用程序提供一个适当的、通用的、标准化的接口。然后，派生类通过继承抽象基类，就把所有类似的操作都继承下来。



包含对象成员的类？
    类里有其他对象则该对象叫成员对象；有成员对象的类叫 封闭类。
    汽车类里面，包含了轮胎类“的实例化的对象”；轮胎类是成员对象      汽车类，叫做封闭类。
    封闭类，要尽量定义构造函数。因为里面包含的类（好吧，也就是专有名词“成员对象”），需要定义（实现）
    
  
类模板？
	template<class T1,class T2>
	...
	person<string,int>p1("孙悟空",999)
	dd类模板，其实是类的构造函数的模板？
        类模板的意思是这样的：创建了一个模板类T obj，T是啥不知道，obj是啥也不知道。但obj肯定要么是int，要么是float，也可能是个类，比如说自定义的Person类。直到后面发现有一个obj.ShowPerson1。才终于知道这是一个Person类。
	
00000000类模板还有4个案例没看，放在这里，先过了。
	https://blog.csdn.net/jianglij4321/article/details/114230440
	
	
	


string类
       通过string类学习模板，学习STL，能不能直接学呢？因为string类看不懂啊！



智能指针模板类
       3个智能指针模板类:auto_ptr、unique_ptr、shared_ptr,顺便会提一下weak_ptr。其中auto_ptr已经被抛弃了,它是一个过时的产物,我们介绍它只为抛砖引玉。
       
       STL中的智能指针auto_ptr
       1、生命周期结束时，销毁指向的内存空间；
       2、不能指向堆数组，只能指向堆对象（变量）；
       3、一片堆空间只属于一个智能指针对象；
       4、多个智能指针对象不能指向同一片堆空间。
       
       注意,所有智能指针类都有一个explicit构造函数,该构造函数将指针作为参数。所以它不会将指针转换成智能指针对象。
       
       1、智能指针C++中的自动内存管理的主要手段；
       2、智能指针在各个平台上都有不同的表现形式；
       3、智能指针能够尽可能的避免内存相关的问题；
       4、STL和Qt中都有提供了对智能指针的支持。
       explicit implicit
       显示声明，隐式声明
       https://www.jianshu.com/p/9def113ccfa5



标准模板库/泛型编程

这是一个不错的全STL的讲解。
https://blog.csdn.net/trisomydroplets/article/details/125219309

ad hoc多态，参数多态
STL基本概念
STL(Standard Template Library)，标准模板库
从广义上分为：容器(containor)、算法(algorithm)、迭代器(iterator)
容器和算法之间通过迭代器进行无缝衔接
STL几乎所有的代码都采用了模板类或者模板函数
STL六大组件
容器：各种数据结构，如vector、list、deque、set、map等，用来存放数据
算法：各种常用的算法，如sort、find、copy、for_each等
迭代器：扮演了容器与算法的胶合剂
仿函数：行为类似函数，可作为算法的某种策略
适配器（配接器）：一种用来修饰容器或仿函数或迭代器接口的东西
空间配置器：负责空间的配置与管理
容器

容器就是将最广泛的一些数据结构实现出来
常见的数据结构包括 数组、链表、树、栈、队列、集合、映射表 等
序列式容器：强调值的排序，序列式容器中的每个元素均有固定的位置
关联式容器：二叉树结构，各元素之间没有严格的物理顺序关系
算法

质变算法：运算过程会更改区间内元素的内容，如拷贝、替换、删除等
非质变算法：运算过程不会更改区间内元素的内容，如查找、计数、遍历等
迭代器

提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露其内部表达方式
每个容器都有专属的迭代器
迭代器使用非常类似于指针，初学阶段先理解其为指针
迭代器种类如下，其中常见的是双向迭代器和随机访问迭代器


     见下方案例，非常好的案例。




模板类vector


相同点：vector和array是容器；三者均可以使用下表运算符对元素进行操作，即vector和array都针对下标运算符[]进行了重载；三者在内存的方面都使用连续内存，即在vector和array的底层存储结构均使用数组不同点：array 定义的时候必须定义数组的元素个数为常量表达式，而vector 可为变量表达式；vector属于变长容器，即可以根据数据的插入删除重新构建容器容量；但array和数组属于定长容量。vector和array在声明变量后，在生命周期完成后，会自动地释放其所占用的内存。对于数组，如果是采用new[]申请的内存空间，必须在使用delete[]完毕后手动释放其内存。array对象和数组存储在相同的内存区域（栈）中，vector对象存储在自由存储区（堆）


泛型编程，迭代器，容器，算法，算法组
其他库，vector，array，valarray

容器和数组差不多。各种不同的数组。迭代器，是一些指针。算法，是可以节省很多性能的东西。
算法：
find()
equal_range()
sort()
copy()
swap()





---------------------------------------------------------
虚函数：增加或者去掉virtual，显示结果不同

#include<iostream>
using namespace std;
class Father {
public:
	virtual void display() {
		cout << "Father::display()\n";
	}

	void fatherShowDisplay() {
		display();
	}
};
class Son :public Father {
public:

	void display() {
		cout << "Son::display()\n";
	}
};

int main() {
	Son son;                  
	son.fatherShowDisplay();   
}


#include<iostream>
using namespace std;
// 基类 Father
class Father {
public:
	// 定义了虚函数
	void virtual  display() {
		cout << "Father::display()\n";
	}
};

// 子类Son
class Son :public Father {
public:
	// 覆盖基类中的display函数
	void display() {
		cout << "Son::display()\n";
	}
};

int main() {
	Father* fp;     // 定义基类指针
	Son son;        // 子类对象
	fp = &son;        // 使基类指针指向子类对象
	fp->display();  // 通过基类指针想调用子类中覆盖的display函数
  
  
  
  或许，很多小伙伴都会有这样一个疑问：如果想调用子类中的覆盖函数，直接通过子类对象，或者指向子类对象的子类指针来调用，不就没这个烦恼了吗？要虚函数还有什么用呢？
其实不然，虚函数的实际意义非常之大。比如在实际开发过程中，会用到别人封装好的框架和类库，我们可以通过继承其中的类，并覆盖基类中的函数，来实现自定义的功能。
但是，有些函数是需要框架来调用，并且API需要传入基类指针类型的参数。而使用虚函数就可以，将指向子类对象的基类指针来作为参数传入API，让API能够通过基类指针，来调用我们自定义的子类函数。这就是多态性的真正体现。


-----------------
成员对象和封闭类：
class CTyre  // 轮胎类
{
public:
	// 有参数构造函数
	// 初始化成员变量m_radius和m_width
	CTyre(int r, int w) :m_radius(r), m_width(w) { }
private:
	int m_radius; // 半径
	int m_width;  // 宽度
};

class CEngine // 引擎类
{
	// 默认会有无参数构造函数
};

class CCar // 汽车类 -- 封闭类
{
public:
	// 有参数构造函数
	// 对成员变量m_price初始化，对成员对象tyre初始化
	CCar(int p, int tr, int tw) :m_price(p), tyre(tr, tw) {}
private:
	int m_price;    // 价格
	CTyre tyre;     // 成员对象
	CEngine engine; // 成员对象
};

int main()
{
	CCar car(10000, 20, 50);
	return 0;
}


-----------------------
类模板：

#include <string>
#include <iostream>
using namespace std;
//类模板
template<class T1, class T2>
class Person
{
public:
	Person(T1 name, T2 age)
	{
		this->m_name = name;
		this->m_age = age;
	}

	void showPerson()
	{
		cout << "name:" << this->m_name << "age:" << this->m_age << endl;
	}
	T1 m_name;
	T2 m_age;
};

void main()
{
	Person<string, int>p1("孙悟空", 999);
	p1.showPerson();
}



类模板2：

#include <iostream>
#include <string>
using namespace std;
class Person1
{
public:
	void showPerson1()
	{
		cout << "Person1 show" << endl;
	}
};
class Person2
{
public:
	void showPerson2()
	{
		cout << "Person2 show" << endl;
	}
};
template<class T>
class Myclass
{
public:
	T obj;
	//类模板中成员函数
	void func1()
	{
		obj.showPerson1();
	}

	void func2()
	{
		obj.showPerson2();
	}
};
void test01()
{
	Myclass<Person1>m;
	m.func1();
	//m.func2();
}
int main()
{
	test01();
	system("pause");

}


类模板3：

类模板对象做函数的参数。类模板对象 做 函数的参数。一共有三种方式，第一种最常用。


#include <iostream>
#include <string>
using namespace std;

template<class T1, class T2>
class Person
{
public:
	Person(T1 name, T2 age)
	{
		m_name = name;
		m_age = age;
	}

	void showperson()
	{
		cout << "姓名：" << m_name << "年龄：" << m_age << endl;
	}

	T1 m_name;
	T2 m_age;
};


//1、指定传入的类型
void printPerson1(Person<string, int>& p)
{
	p.showperson();
}

void test01()
{
	Person<string, int> p1("孙悟空", 99);
	printPerson1(p1);
}

//2、模板参数化
template<class T1, class T2>
void printPerson2(Person<T1, T2>& p)
{
	p.showperson();
	cout << "T1的类型为：" << typeid(T1).name() << endl;
	cout << "T2的类型为：" << typeid(T2).name() << endl;
}
void test02()
{
	Person<string, int> p2("猪八戒", 88);
	printPerson2(p2);
}

//3、整个类模板化
template<class T>
void printPerson3(T& p)
{
	p.showperson();
	cout << "T的类型为：" << typeid(T).name() << endl;
}
void test03()
{
	Person<string, int>p3("唐僧", 77);
	printPerson3(p3);
}



int main()
{
	test03();
	system("pause");

}

------------------------------

泛型编程：

#include <iostream>
#include <iostream>
using namespace std;
template<class T, size_t Size>
void add(T(&x)[Size], T(&y)[Size], T(&z)[Size])
{
	for (size_t i = 0; i < Size; i++)
	{
		z[i] = x[i] + y[i];
		cout<<z[i]<<endl;
	}
}
int main()
{
	float a[3] = { 2,4 };
	float b[3] = { 22,24 };
	float c[3] = { 23,4444 };
	add(a,b,c);
	return 0;
}

其中add函数本来是长这个样子的：
void add(int x[2], int y[2], int z[2])
{
	z[0] = x[0] + y[0];
	z[1] = x[1] + y[1];
}
或者这样子
void add(int x[5], int y[5], int z[5])
{
	z[0] = x[0] + y[0];
	z[1] = x[1] + y[1];
	z[2] = x[2] + y[2];
	z[3] = x[3] + y[3];
	z[4] = x[4] + y[4];
}
或者把int改为short，long，double等等。

。。。。。。。。
或者一个暂时还不懂的版本：
#include <iostream>
#include <iostream>
using namespace std;
template<class T, size_t Size, size_t... Index>
void add_imp(T(&x)[Size], T(&y)[Size], T(&z)[Size], std::index_sequence<Index...>* p)
{
	int Temp[] = { 0, (z[Index] = x[Index] + y[Index], 0)... };
	(void)Temp;
}

template<class T, size_t Size>
void add(T(&x)[Size], T(&y)[Size], T(&z)[Size])
{
	add_imp(x, y, z, (std::make_index_sequence<Size>*)0);
	cout<<z[0]<<endl;
}

int main()
{
	float a[3] = { 2,4 };
	float b[3] = { 22,24 };
	float c[3] = { 23,4444 };
	add(a,b,c);
	return 0;
}
。。。。。。。。。。。。



----------------
valarray示例：
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <array>
#include <complex>
#include <valarray>	// 引入头文件
using namespace std;

// 打印valarray
template <typename T> void printValarray(const valarray<T>& va)
{
	for (int i = 0; i < va.size(); i++)
		cout << va[i] << "  ";
	cout << endl; 
}

void main()
{
	// 创建一个大小为4的valarray
	valarray<int> val(4);
	printValarray(val);	// 输出：0 0 0 0

	// 创建一个大小为4、值全为3的valarray
	valarray<int>va2(3, 4);
	printValarray(va2); // 输出：3 3 3 3

	// 使用数组初始化valarray
	int ia[] = { 1,2,3,4,5,687585 };
	valarray<int> va3(ia, sizeof(ia) / sizeof(ia[0]));
	printValarray(va3); // 输出：1 2 3 4 5 6

	// 使用数组创建大小为4的valarray
	valarray<int>va4(ia + 1, 4);
	printValarray(va4); // 输出： 2 3 4 5

	// 使用valarray进行数学运算
	val = va2 * va4+va4*va4;
	printValarray(val);  // 输出： 10 18 28 40
}


